// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"

	pcrcrud "github.com/daffashafwan/pointcuan/business/pcr_crud"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, domain
func (_m *Repository) Create(ctx context.Context, domain *pcrcrud.Domain) (pcrcrud.Domain, error) {
	ret := _m.Called(ctx, domain)

	var r0 pcrcrud.Domain
	if rf, ok := ret.Get(0).(func(context.Context, *pcrcrud.Domain) pcrcrud.Domain); ok {
		r0 = rf(ctx, domain)
	} else {
		r0 = ret.Get(0).(pcrcrud.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pcrcrud.Domain) error); ok {
		r1 = rf(ctx, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPCR provides a mock function with given fields: ctx
func (_m *Repository) GetPCR(ctx context.Context) (pcrcrud.Domain, error) {
	ret := _m.Called(ctx)

	var r0 pcrcrud.Domain
	if rf, ok := ret.Get(0).(func(context.Context) pcrcrud.Domain); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(pcrcrud.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, domain
func (_m *Repository) Update(ctx context.Context, domain pcrcrud.Domain) (pcrcrud.Domain, error) {
	ret := _m.Called(ctx, domain)

	var r0 pcrcrud.Domain
	if rf, ok := ret.Get(0).(func(context.Context, pcrcrud.Domain) pcrcrud.Domain); ok {
		r0 = rf(ctx, domain)
	} else {
		r0 = ret.Get(0).(pcrcrud.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, pcrcrud.Domain) error); ok {
		r1 = rf(ctx, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
