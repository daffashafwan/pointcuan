// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"

	admin "github.com/daffashafwan/pointcuan/business/admin"

	mock "github.com/stretchr/testify/mock"
)

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

// GetById provides a mock function with given fields: ctx, id
func (_m *Usecase) GetById(ctx context.Context, id int) (admin.Domain, error) {
	ret := _m.Called(ctx, id)

	var r0 admin.Domain
	if rf, ok := ret.Get(0).(func(context.Context, int) admin.Domain); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(admin.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: ctx, domain
func (_m *Usecase) Login(ctx context.Context, domain admin.Domain) (admin.Domain, error) {
	ret := _m.Called(ctx, domain)

	var r0 admin.Domain
	if rf, ok := ret.Get(0).(func(context.Context, admin.Domain) admin.Domain); ok {
		r0 = rf(ctx, domain)
	} else {
		r0 = ret.Get(0).(admin.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, admin.Domain) error); ok {
		r1 = rf(ctx, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
